{"basic_builder": {"appname": "TA-bugcrowd-api-v4", "friendly_name": "Bugcrowd API v4", "version": "1.0.0", "author": "Kyle Fennell", "description": "", "theme": "#f07a35", "large_icon": "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", "small_icon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAADZklEQVRYR9WY6VIiQRCEa8ADVPACT1BAUN//abw4FDRU8MALFAw3vlp7olFkh2E2lu1fKn1kZWZlNzoyZsMZMzwy3oAODg4+/gVj+/v7LjE9DPkBxAajVhEoIL+M2oUECshxRD5GpChQQJFIRElyHEe63a50Oh1PpNmF+AYUCoUkn89Lu92WVqsli4uL8vT0JBcXFwpiY2ND5ubm5Pb2VgAajUbl5OREPmwK+5jON6D5+XlpNpueGDCsAfDx8fHbmkA8BDvFYtGteG1tTQAJA0j2/v4u19fX8vDw4MqYzeWkVCy6gPp5biiGkCkWi0kymVT6Gdvb2/L8/CyNRuN75Y4j2WxWgSEnI5fLyd3dndzf3/fK97l6KEC7u7tydHSkDMCE+Z29CoWCdDtdKVfKrofwTalUktnZWfXT5eWlu5b5x8fH34oYCtDW1pacnZ3pJkhmWJqcnFSAfA4Axt7enhweHko8HlfZAEQhxkOZTEYqlcpogJCqXq9rxbT029ubbugFEPMymaxUPhlcWlpS6Xq6TkSGYshIZKrnkIWFBZmamtL2hiFj4uXlZWVoc3NTXl5e9HAzH//Ye9g0eQZEllAVOWOYSiQScnNz09ecX7VQuatVKeTz6p10Oi2NRl1arXbP1KEAEYL4YHp6WgMRdqjWyyAoKcY2M9LTob4YomNIZFofz7y+vio4/o4kg4aZx/qdnR23GTC6iQOz3jNDgEAqqrRT2lQ+CJDNpPEOkhEDNIfvpDamJtxMe9tZ9NNtb7c4Jj8/P+/JMF+SsQgTk8g2KyT16enpQMkMaJji/qPVuYxN5/kGlEqlpFar6XpT9czMjN5beKrfwHMAIRaymayb5HbI+gZEh5h0JntIYYISP2BsqucdxJiYmNB0Zg7pblgCIAzZ5rZN5NnUHEK3cMjKyore9GTT6uqqK1k6lZZqraqAjPEBhue4AxlctmSXCdCvrA4FyF7MIeVyWauFoXA4rNlE5zB4Fayvr8vV1ZUyBzP4jTWDhm9A/UyZSCakUf/9DAGQ/RiD3XgsJs3P99FPoHwD4gBufHIE+skofjZxgDRkFx4DHJ4z/vsrDPXbNBKNSDgUVq/RdV4f+b67bKD4AX3oW7J+5//pe5mXb7aBAgqCpP8HUBDVjrrHeP9/aNTqglj/C7HiOUODXYWaAAAAAElFTkSuQmCC", "visible": true, "tab_version": "3.0.1", "tab_build_no": "2", "build_no": 1}, "data_input_builder": {"datainputs": [{"index": "default", "sourcetype": "bugcrowd", "interval": "30", "use_external_validation": true, "streaming_mode_xml": true, "name": "bugcrowd", "title": "bugcrowd", "description": "", "type": "customized", "parameters": [{"required": true, "name": "api_key", "label": "API Key", "default_value": "", "placeholder": "", "help_string": "Header token", "type": "text", "format_type": "text", "value": ""}], "data_inputs_options": [{"type": "customized_var", "name": "api_key", "title": "API Key", "description": "Header token", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": ""}], "code": "\n\n# encoding = utf-8\n\nimport json\nimport os\nimport sys\nimport time\nimport datetime\n\n'''\n    IMPORTANT\n    Edit only the validate_input and collect_events functions.\n    Do not edit any other part in this file.\n    This file is generated only once when creating the modular input.\n'''\n'''\n# For advanced users, if you want to create single instance mod input, uncomment this method.\ndef use_single_instance_mode():\n    return True\n'''\n\ndef validate_input(helper, definition):\n    \"\"\"Implement your own validation logic to validate the input stanza configurations\"\"\"\n    # This example accesses the modular input variable\n    # api_key = definition.parameters.get('api_key', None)\n    pass\n\ndef collect_events(helper, ew):\n    \"\"\"Implement your data collection logic here\"\"\"\n\n    # The following examples get the arguments of this input.\n    # Note, for single instance mod input, args will be returned as a dict.\n    # For multi instance mod input, args will be returned as a single value.\n    opt_api_key = helper.get_arg('api_key')\n\n    helper.set_log_level(\"info\")\n    \n    return_limit = 100\n    return_offset = 0\n    more_submissions = True\n    \n    while more_submissions:\n        url = \"https://api.bugcrowd.com/submissions\"\n        param = {\n            'fields[submission]': 'title,duplicate,custom_fields,submitted_at,bug_url,vrt_id,severity,state,last_transitioned_to_not_applicable_at,last_transitioned_to_not_reproducible_at,last_transitioned_to_out_of_scope_at,last_transitioned_to_wont_fix_at,last_transitioned_to_triaged_at,last_transitioned_to_unresolved_at,last_transitioned_to_resolved_at,assignee,researcher,description,activities,program,target,monetary_rewards',\n            'include': 'monetary_rewards,researcher,assignee,program,target',\n            'fields[program]': 'name',\n            'fields[target]': 'name',\n            'page[limit]': return_limit,\n            'page[offset]': return_offset}\n        head = {'Authorization': 'Token ' + opt_api_key, 'Accept': 'application/vnd.bugcrowd.v4+json'}\n        final_result = []\n\n        response = helper.send_http_request(url, 'GET', parameters=param, payload=None,\n                                        headers=head, cookies=None, verify=True, cert=None,\n                                        timeout=None, use_proxy=True)\n\n        if response.status_code == 200:\n            r_json = response.json()\n        else:\n            helper.log_error(\"Bugcrowd API request failed with a status code of: %s\" % response.status_code)\n            return\n        \n        if r_json['meta']['count'] < return_limit:\n            more_submissions = False\n        else:\n            return_offset = return_offset + return_limit\n\n        for submission in r_json['data']:\n            \n            # Using the last activity id as a checkpoint for submissions. Note that submissions\n            # with more than 100 activities will no longer index as the last id will not\n            # change.In future versions of the API there will be better ways to handle this.\n            latest_activity = submission['relationships']['activities']['data'][-1]['id']\n            state = helper.get_check_point(latest_activity)\n            \n            if state is None:\n                # remove unnecessary 'links' \n                submission['relationships']['assignee'].pop('links')\n                submission['relationships']['researcher'].pop('links')\n                submission['relationships']['program'].pop('links')\n                submission['relationships']['target'].pop('links')\n                submission['relationships']['monetary_rewards'].pop('links')\n                submission.pop('links')\n                \n                final_result.append(submission)\n                helper.save_check_point(latest_activity, \"Indexed\")\n            #helper.delete_check_point(latest_activity)\n    \n        for included in r_json['included']:\n            state = helper.get_check_point(included['id'])\n            if state is None:\n                # remove unnecessary 'links' and 'relationships'\n                included.pop('links')\n                if 'relationships' in included:\n                    included.pop('relationships')\n                final_result.append(included)\n                helper.save_check_point(included['id'], \"Indexed\")\n            #helper.delete_check_point(included['id'])\n\n        # To create a splunk event\n        event = helper.new_event(json.dumps(final_result), host='api.bugrowd.com', index=helper.get_output_index(), source=helper.get_input_type(), sourcetype=helper.get_sourcetype(), done=True, unbroken=True)\n        ew.write_event(event)\n        helper.log_info(\"Indexed %s submissions\" % r_json['meta']['count'])\n    \n    helper.log_info(\"Successfully retrieved and indexed all new/updated Bugcrowd submissions.\")\n\n", "customized_options": [{"name": "api_key", "value": ""}], "uuid": "c2eabc0cb53346baa62c522aaeeb86cc"}]}, "global_settings_builder": {"global_settings": {"log_settings": {}}}, "sourcetype_builder": {"bugcrowd": {"metadata": {"event_count": 0, "data_input_name": "bugcrowd", "extractions_count": 0, "cims_count": 0}}}, "validation": {"validators": ["best_practice_validation", "data_model_mapping_validation", "field_extract_validation", "app_cert_validation"], "status": "job_finished", "validation_id": "v_1626427504_63", "progress": 1.0}}